generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  client
  admin
}

enum BalanceChangeType {
  increase
  reduce
  set
}

enum BalanceChangeSourceType {
  generation_text
  admin_action
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique @db.VarChar(256)
  password  String
  role      UserRole @default(client)
  credits   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken            RefreshToken?
  creditTransfersSent     CreditTransfer[] @relation("sender")
  creditTransfersReceived CreditTransfer[] @relation("receiver")
  balanceChanges          BalanceChange[]
}

model BalanceChange {
  id         String                  @id @default(uuid()) @db.Uuid
  count      Int
  type       BalanceChangeType
  reason     String?
  sourceType BalanceChangeSourceType
  createdAt  DateTime                @default(now())
  userId     String                  @db.Uuid

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditTransfers CreditTransfer?
}

model RefreshToken {
  refreshToken String
  userId       String @unique @db.Uuid

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model CreditTransfer {
  id              String   @id @default(uuid()) @db.Uuid
  createdAt       DateTime @default(now())
  senderId        String?  @db.Uuid
  receiverId      String?  @db.Uuid
  balanceChangeId String   @unique @db.Uuid

  sender        User?         @relation(name: "sender", fields: [senderId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  receiver      User?         @relation(name: "receiver", fields: [receiverId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  balanceChange BalanceChange @relation(fields: [balanceChangeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}
